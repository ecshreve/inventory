// Code generated by ent, DO NOT EDIT.

package ent

import (
	"goinv/ent/item"
	"goinv/ent/storagelocation"
	"time"
)

// CreateItemInput represents a mutation input for creating items.
type CreateItemInput struct {
	CreatedAt         *time.Time
	UpdatedAt         *time.Time
	Name              string
	Quantity          int
	Category          item.Category
	StorageLocationID *int
}

// Mutate applies the CreateItemInput on the ItemMutation builder.
func (i *CreateItemInput) Mutate(m *ItemMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetName(i.Name)
	m.SetQuantity(i.Quantity)
	m.SetCategory(i.Category)
	if v := i.StorageLocationID; v != nil {
		m.SetStorageLocationID(*v)
	}
}

// SetInput applies the change-set in the CreateItemInput on the ItemCreate builder.
func (c *ItemCreate) SetInput(i CreateItemInput) *ItemCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateItemInput represents a mutation input for updating items.
type UpdateItemInput struct {
	UpdatedAt            *time.Time
	Name                 *string
	Quantity             *int
	Category             *item.Category
	ClearStorageLocation bool
	StorageLocationID    *int
}

// Mutate applies the UpdateItemInput on the ItemMutation builder.
func (i *UpdateItemInput) Mutate(m *ItemMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Quantity; v != nil {
		m.SetQuantity(*v)
	}
	if v := i.Category; v != nil {
		m.SetCategory(*v)
	}
	if i.ClearStorageLocation {
		m.ClearStorageLocation()
	}
	if v := i.StorageLocationID; v != nil {
		m.SetStorageLocationID(*v)
	}
}

// SetInput applies the change-set in the UpdateItemInput on the ItemUpdate builder.
func (c *ItemUpdate) SetInput(i UpdateItemInput) *ItemUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateItemInput on the ItemUpdateOne builder.
func (c *ItemUpdateOne) SetInput(i UpdateItemInput) *ItemUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateStorageLocationInput represents a mutation input for creating storagelocations.
type CreateStorageLocationInput struct {
	CreatedAt *time.Time
	UpdatedAt *time.Time
	Name      string
	Size      storagelocation.Size
	Color     storagelocation.Color
	ItemIDs   []int
}

// Mutate applies the CreateStorageLocationInput on the StorageLocationMutation builder.
func (i *CreateStorageLocationInput) Mutate(m *StorageLocationMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetName(i.Name)
	m.SetSize(i.Size)
	m.SetColor(i.Color)
	if v := i.ItemIDs; len(v) > 0 {
		m.AddItemIDs(v...)
	}
}

// SetInput applies the change-set in the CreateStorageLocationInput on the StorageLocationCreate builder.
func (c *StorageLocationCreate) SetInput(i CreateStorageLocationInput) *StorageLocationCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateStorageLocationInput represents a mutation input for updating storagelocations.
type UpdateStorageLocationInput struct {
	UpdatedAt     *time.Time
	Name          *string
	Size          *storagelocation.Size
	Color         *storagelocation.Color
	ClearItems    bool
	AddItemIDs    []int
	RemoveItemIDs []int
}

// Mutate applies the UpdateStorageLocationInput on the StorageLocationMutation builder.
func (i *UpdateStorageLocationInput) Mutate(m *StorageLocationMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Size; v != nil {
		m.SetSize(*v)
	}
	if v := i.Color; v != nil {
		m.SetColor(*v)
	}
	if i.ClearItems {
		m.ClearItems()
	}
	if v := i.AddItemIDs; len(v) > 0 {
		m.AddItemIDs(v...)
	}
	if v := i.RemoveItemIDs; len(v) > 0 {
		m.RemoveItemIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateStorageLocationInput on the StorageLocationUpdate builder.
func (c *StorageLocationUpdate) SetInput(i UpdateStorageLocationInput) *StorageLocationUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateStorageLocationInput on the StorageLocationUpdateOne builder.
func (c *StorageLocationUpdateOne) SetInput(i UpdateStorageLocationInput) *StorageLocationUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
