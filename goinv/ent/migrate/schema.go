// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ItemsColumns holds the columns for the "items" table.
	ItemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "quantity", Type: field.TypeInt},
		{Name: "category", Type: field.TypeEnum, Enums: []string{"adapter", "cable", "device", "misc"}},
		{Name: "item_storage_location", Type: field.TypeInt, Nullable: true},
	}
	// ItemsTable holds the schema information for the "items" table.
	ItemsTable = &schema.Table{
		Name:       "items",
		Columns:    ItemsColumns,
		PrimaryKey: []*schema.Column{ItemsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "items_storage_locations_storage_location",
				Columns:    []*schema.Column{ItemsColumns[6]},
				RefColumns: []*schema.Column{StorageLocationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// StorageLocationsColumns holds the columns for the "storage_locations" table.
	StorageLocationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "size", Type: field.TypeEnum, Enums: []string{"half", "full", "other"}},
		{Name: "color", Type: field.TypeEnum, Enums: []string{"white", "gray", "stealth", "orange", "black", "other"}},
	}
	// StorageLocationsTable holds the schema information for the "storage_locations" table.
	StorageLocationsTable = &schema.Table{
		Name:       "storage_locations",
		Columns:    StorageLocationsColumns,
		PrimaryKey: []*schema.Column{StorageLocationsColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ItemsTable,
		StorageLocationsTable,
	}
)

func init() {
	ItemsTable.ForeignKeys[0].RefTable = StorageLocationsTable
}
