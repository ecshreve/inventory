// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"goinv/ent/item"
	"goinv/ent/storagelocation"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StorageLocationCreate is the builder for creating a StorageLocation entity.
type StorageLocationCreate struct {
	config
	mutation *StorageLocationMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (slc *StorageLocationCreate) SetCreatedAt(t time.Time) *StorageLocationCreate {
	slc.mutation.SetCreatedAt(t)
	return slc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (slc *StorageLocationCreate) SetNillableCreatedAt(t *time.Time) *StorageLocationCreate {
	if t != nil {
		slc.SetCreatedAt(*t)
	}
	return slc
}

// SetUpdatedAt sets the "updated_at" field.
func (slc *StorageLocationCreate) SetUpdatedAt(t time.Time) *StorageLocationCreate {
	slc.mutation.SetUpdatedAt(t)
	return slc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (slc *StorageLocationCreate) SetNillableUpdatedAt(t *time.Time) *StorageLocationCreate {
	if t != nil {
		slc.SetUpdatedAt(*t)
	}
	return slc
}

// SetName sets the "name" field.
func (slc *StorageLocationCreate) SetName(s string) *StorageLocationCreate {
	slc.mutation.SetName(s)
	return slc
}

// SetSize sets the "size" field.
func (slc *StorageLocationCreate) SetSize(s storagelocation.Size) *StorageLocationCreate {
	slc.mutation.SetSize(s)
	return slc
}

// SetColor sets the "color" field.
func (slc *StorageLocationCreate) SetColor(s storagelocation.Color) *StorageLocationCreate {
	slc.mutation.SetColor(s)
	return slc
}

// AddItemIDs adds the "items" edge to the Item entity by IDs.
func (slc *StorageLocationCreate) AddItemIDs(ids ...int) *StorageLocationCreate {
	slc.mutation.AddItemIDs(ids...)
	return slc
}

// AddItems adds the "items" edges to the Item entity.
func (slc *StorageLocationCreate) AddItems(i ...*Item) *StorageLocationCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return slc.AddItemIDs(ids...)
}

// Mutation returns the StorageLocationMutation object of the builder.
func (slc *StorageLocationCreate) Mutation() *StorageLocationMutation {
	return slc.mutation
}

// Save creates the StorageLocation in the database.
func (slc *StorageLocationCreate) Save(ctx context.Context) (*StorageLocation, error) {
	slc.defaults()
	return withHooks(ctx, slc.sqlSave, slc.mutation, slc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (slc *StorageLocationCreate) SaveX(ctx context.Context) *StorageLocation {
	v, err := slc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (slc *StorageLocationCreate) Exec(ctx context.Context) error {
	_, err := slc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slc *StorageLocationCreate) ExecX(ctx context.Context) {
	if err := slc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (slc *StorageLocationCreate) defaults() {
	if _, ok := slc.mutation.CreatedAt(); !ok {
		v := storagelocation.DefaultCreatedAt()
		slc.mutation.SetCreatedAt(v)
	}
	if _, ok := slc.mutation.UpdatedAt(); !ok {
		v := storagelocation.DefaultUpdatedAt()
		slc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (slc *StorageLocationCreate) check() error {
	if _, ok := slc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "StorageLocation.created_at"`)}
	}
	if _, ok := slc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "StorageLocation.updated_at"`)}
	}
	if _, ok := slc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "StorageLocation.name"`)}
	}
	if _, ok := slc.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`ent: missing required field "StorageLocation.size"`)}
	}
	if v, ok := slc.mutation.Size(); ok {
		if err := storagelocation.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`ent: validator failed for field "StorageLocation.size": %w`, err)}
		}
	}
	if _, ok := slc.mutation.Color(); !ok {
		return &ValidationError{Name: "color", err: errors.New(`ent: missing required field "StorageLocation.color"`)}
	}
	if v, ok := slc.mutation.Color(); ok {
		if err := storagelocation.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf(`ent: validator failed for field "StorageLocation.color": %w`, err)}
		}
	}
	return nil
}

func (slc *StorageLocationCreate) sqlSave(ctx context.Context) (*StorageLocation, error) {
	if err := slc.check(); err != nil {
		return nil, err
	}
	_node, _spec := slc.createSpec()
	if err := sqlgraph.CreateNode(ctx, slc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	slc.mutation.id = &_node.ID
	slc.mutation.done = true
	return _node, nil
}

func (slc *StorageLocationCreate) createSpec() (*StorageLocation, *sqlgraph.CreateSpec) {
	var (
		_node = &StorageLocation{config: slc.config}
		_spec = sqlgraph.NewCreateSpec(storagelocation.Table, sqlgraph.NewFieldSpec(storagelocation.FieldID, field.TypeInt))
	)
	if value, ok := slc.mutation.CreatedAt(); ok {
		_spec.SetField(storagelocation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := slc.mutation.UpdatedAt(); ok {
		_spec.SetField(storagelocation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := slc.mutation.Name(); ok {
		_spec.SetField(storagelocation.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := slc.mutation.Size(); ok {
		_spec.SetField(storagelocation.FieldSize, field.TypeEnum, value)
		_node.Size = value
	}
	if value, ok := slc.mutation.Color(); ok {
		_spec.SetField(storagelocation.FieldColor, field.TypeEnum, value)
		_node.Color = value
	}
	if nodes := slc.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   storagelocation.ItemsTable,
			Columns: []string{storagelocation.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StorageLocationCreateBulk is the builder for creating many StorageLocation entities in bulk.
type StorageLocationCreateBulk struct {
	config
	err      error
	builders []*StorageLocationCreate
}

// Save creates the StorageLocation entities in the database.
func (slcb *StorageLocationCreateBulk) Save(ctx context.Context) ([]*StorageLocation, error) {
	if slcb.err != nil {
		return nil, slcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(slcb.builders))
	nodes := make([]*StorageLocation, len(slcb.builders))
	mutators := make([]Mutator, len(slcb.builders))
	for i := range slcb.builders {
		func(i int, root context.Context) {
			builder := slcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StorageLocationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, slcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, slcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, slcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (slcb *StorageLocationCreateBulk) SaveX(ctx context.Context) []*StorageLocation {
	v, err := slcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (slcb *StorageLocationCreateBulk) Exec(ctx context.Context) error {
	_, err := slcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slcb *StorageLocationCreateBulk) ExecX(ctx context.Context) {
	if err := slcb.Exec(ctx); err != nil {
		panic(err)
	}
}
