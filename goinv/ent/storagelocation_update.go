// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"goinv/ent/item"
	"goinv/ent/predicate"
	"goinv/ent/storagelocation"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StorageLocationUpdate is the builder for updating StorageLocation entities.
type StorageLocationUpdate struct {
	config
	hooks    []Hook
	mutation *StorageLocationMutation
}

// Where appends a list predicates to the StorageLocationUpdate builder.
func (slu *StorageLocationUpdate) Where(ps ...predicate.StorageLocation) *StorageLocationUpdate {
	slu.mutation.Where(ps...)
	return slu
}

// SetUpdatedAt sets the "updated_at" field.
func (slu *StorageLocationUpdate) SetUpdatedAt(t time.Time) *StorageLocationUpdate {
	slu.mutation.SetUpdatedAt(t)
	return slu
}

// SetName sets the "name" field.
func (slu *StorageLocationUpdate) SetName(s string) *StorageLocationUpdate {
	slu.mutation.SetName(s)
	return slu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (slu *StorageLocationUpdate) SetNillableName(s *string) *StorageLocationUpdate {
	if s != nil {
		slu.SetName(*s)
	}
	return slu
}

// SetSize sets the "size" field.
func (slu *StorageLocationUpdate) SetSize(s storagelocation.Size) *StorageLocationUpdate {
	slu.mutation.SetSize(s)
	return slu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (slu *StorageLocationUpdate) SetNillableSize(s *storagelocation.Size) *StorageLocationUpdate {
	if s != nil {
		slu.SetSize(*s)
	}
	return slu
}

// SetColor sets the "color" field.
func (slu *StorageLocationUpdate) SetColor(s storagelocation.Color) *StorageLocationUpdate {
	slu.mutation.SetColor(s)
	return slu
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (slu *StorageLocationUpdate) SetNillableColor(s *storagelocation.Color) *StorageLocationUpdate {
	if s != nil {
		slu.SetColor(*s)
	}
	return slu
}

// AddItemIDs adds the "items" edge to the Item entity by IDs.
func (slu *StorageLocationUpdate) AddItemIDs(ids ...int) *StorageLocationUpdate {
	slu.mutation.AddItemIDs(ids...)
	return slu
}

// AddItems adds the "items" edges to the Item entity.
func (slu *StorageLocationUpdate) AddItems(i ...*Item) *StorageLocationUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return slu.AddItemIDs(ids...)
}

// Mutation returns the StorageLocationMutation object of the builder.
func (slu *StorageLocationUpdate) Mutation() *StorageLocationMutation {
	return slu.mutation
}

// ClearItems clears all "items" edges to the Item entity.
func (slu *StorageLocationUpdate) ClearItems() *StorageLocationUpdate {
	slu.mutation.ClearItems()
	return slu
}

// RemoveItemIDs removes the "items" edge to Item entities by IDs.
func (slu *StorageLocationUpdate) RemoveItemIDs(ids ...int) *StorageLocationUpdate {
	slu.mutation.RemoveItemIDs(ids...)
	return slu
}

// RemoveItems removes "items" edges to Item entities.
func (slu *StorageLocationUpdate) RemoveItems(i ...*Item) *StorageLocationUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return slu.RemoveItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (slu *StorageLocationUpdate) Save(ctx context.Context) (int, error) {
	slu.defaults()
	return withHooks(ctx, slu.sqlSave, slu.mutation, slu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (slu *StorageLocationUpdate) SaveX(ctx context.Context) int {
	affected, err := slu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (slu *StorageLocationUpdate) Exec(ctx context.Context) error {
	_, err := slu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slu *StorageLocationUpdate) ExecX(ctx context.Context) {
	if err := slu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (slu *StorageLocationUpdate) defaults() {
	if _, ok := slu.mutation.UpdatedAt(); !ok {
		v := storagelocation.UpdateDefaultUpdatedAt()
		slu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (slu *StorageLocationUpdate) check() error {
	if v, ok := slu.mutation.Size(); ok {
		if err := storagelocation.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`ent: validator failed for field "StorageLocation.size": %w`, err)}
		}
	}
	if v, ok := slu.mutation.Color(); ok {
		if err := storagelocation.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf(`ent: validator failed for field "StorageLocation.color": %w`, err)}
		}
	}
	return nil
}

func (slu *StorageLocationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := slu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(storagelocation.Table, storagelocation.Columns, sqlgraph.NewFieldSpec(storagelocation.FieldID, field.TypeInt))
	if ps := slu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := slu.mutation.UpdatedAt(); ok {
		_spec.SetField(storagelocation.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := slu.mutation.Name(); ok {
		_spec.SetField(storagelocation.FieldName, field.TypeString, value)
	}
	if value, ok := slu.mutation.Size(); ok {
		_spec.SetField(storagelocation.FieldSize, field.TypeEnum, value)
	}
	if value, ok := slu.mutation.Color(); ok {
		_spec.SetField(storagelocation.FieldColor, field.TypeEnum, value)
	}
	if slu.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   storagelocation.ItemsTable,
			Columns: []string{storagelocation.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := slu.mutation.RemovedItemsIDs(); len(nodes) > 0 && !slu.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   storagelocation.ItemsTable,
			Columns: []string{storagelocation.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := slu.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   storagelocation.ItemsTable,
			Columns: []string{storagelocation.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, slu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{storagelocation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	slu.mutation.done = true
	return n, nil
}

// StorageLocationUpdateOne is the builder for updating a single StorageLocation entity.
type StorageLocationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StorageLocationMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (sluo *StorageLocationUpdateOne) SetUpdatedAt(t time.Time) *StorageLocationUpdateOne {
	sluo.mutation.SetUpdatedAt(t)
	return sluo
}

// SetName sets the "name" field.
func (sluo *StorageLocationUpdateOne) SetName(s string) *StorageLocationUpdateOne {
	sluo.mutation.SetName(s)
	return sluo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sluo *StorageLocationUpdateOne) SetNillableName(s *string) *StorageLocationUpdateOne {
	if s != nil {
		sluo.SetName(*s)
	}
	return sluo
}

// SetSize sets the "size" field.
func (sluo *StorageLocationUpdateOne) SetSize(s storagelocation.Size) *StorageLocationUpdateOne {
	sluo.mutation.SetSize(s)
	return sluo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (sluo *StorageLocationUpdateOne) SetNillableSize(s *storagelocation.Size) *StorageLocationUpdateOne {
	if s != nil {
		sluo.SetSize(*s)
	}
	return sluo
}

// SetColor sets the "color" field.
func (sluo *StorageLocationUpdateOne) SetColor(s storagelocation.Color) *StorageLocationUpdateOne {
	sluo.mutation.SetColor(s)
	return sluo
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (sluo *StorageLocationUpdateOne) SetNillableColor(s *storagelocation.Color) *StorageLocationUpdateOne {
	if s != nil {
		sluo.SetColor(*s)
	}
	return sluo
}

// AddItemIDs adds the "items" edge to the Item entity by IDs.
func (sluo *StorageLocationUpdateOne) AddItemIDs(ids ...int) *StorageLocationUpdateOne {
	sluo.mutation.AddItemIDs(ids...)
	return sluo
}

// AddItems adds the "items" edges to the Item entity.
func (sluo *StorageLocationUpdateOne) AddItems(i ...*Item) *StorageLocationUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return sluo.AddItemIDs(ids...)
}

// Mutation returns the StorageLocationMutation object of the builder.
func (sluo *StorageLocationUpdateOne) Mutation() *StorageLocationMutation {
	return sluo.mutation
}

// ClearItems clears all "items" edges to the Item entity.
func (sluo *StorageLocationUpdateOne) ClearItems() *StorageLocationUpdateOne {
	sluo.mutation.ClearItems()
	return sluo
}

// RemoveItemIDs removes the "items" edge to Item entities by IDs.
func (sluo *StorageLocationUpdateOne) RemoveItemIDs(ids ...int) *StorageLocationUpdateOne {
	sluo.mutation.RemoveItemIDs(ids...)
	return sluo
}

// RemoveItems removes "items" edges to Item entities.
func (sluo *StorageLocationUpdateOne) RemoveItems(i ...*Item) *StorageLocationUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return sluo.RemoveItemIDs(ids...)
}

// Where appends a list predicates to the StorageLocationUpdate builder.
func (sluo *StorageLocationUpdateOne) Where(ps ...predicate.StorageLocation) *StorageLocationUpdateOne {
	sluo.mutation.Where(ps...)
	return sluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sluo *StorageLocationUpdateOne) Select(field string, fields ...string) *StorageLocationUpdateOne {
	sluo.fields = append([]string{field}, fields...)
	return sluo
}

// Save executes the query and returns the updated StorageLocation entity.
func (sluo *StorageLocationUpdateOne) Save(ctx context.Context) (*StorageLocation, error) {
	sluo.defaults()
	return withHooks(ctx, sluo.sqlSave, sluo.mutation, sluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sluo *StorageLocationUpdateOne) SaveX(ctx context.Context) *StorageLocation {
	node, err := sluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sluo *StorageLocationUpdateOne) Exec(ctx context.Context) error {
	_, err := sluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sluo *StorageLocationUpdateOne) ExecX(ctx context.Context) {
	if err := sluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sluo *StorageLocationUpdateOne) defaults() {
	if _, ok := sluo.mutation.UpdatedAt(); !ok {
		v := storagelocation.UpdateDefaultUpdatedAt()
		sluo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sluo *StorageLocationUpdateOne) check() error {
	if v, ok := sluo.mutation.Size(); ok {
		if err := storagelocation.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`ent: validator failed for field "StorageLocation.size": %w`, err)}
		}
	}
	if v, ok := sluo.mutation.Color(); ok {
		if err := storagelocation.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf(`ent: validator failed for field "StorageLocation.color": %w`, err)}
		}
	}
	return nil
}

func (sluo *StorageLocationUpdateOne) sqlSave(ctx context.Context) (_node *StorageLocation, err error) {
	if err := sluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(storagelocation.Table, storagelocation.Columns, sqlgraph.NewFieldSpec(storagelocation.FieldID, field.TypeInt))
	id, ok := sluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StorageLocation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, storagelocation.FieldID)
		for _, f := range fields {
			if !storagelocation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != storagelocation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sluo.mutation.UpdatedAt(); ok {
		_spec.SetField(storagelocation.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sluo.mutation.Name(); ok {
		_spec.SetField(storagelocation.FieldName, field.TypeString, value)
	}
	if value, ok := sluo.mutation.Size(); ok {
		_spec.SetField(storagelocation.FieldSize, field.TypeEnum, value)
	}
	if value, ok := sluo.mutation.Color(); ok {
		_spec.SetField(storagelocation.FieldColor, field.TypeEnum, value)
	}
	if sluo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   storagelocation.ItemsTable,
			Columns: []string{storagelocation.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sluo.mutation.RemovedItemsIDs(); len(nodes) > 0 && !sluo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   storagelocation.ItemsTable,
			Columns: []string{storagelocation.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sluo.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   storagelocation.ItemsTable,
			Columns: []string{storagelocation.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &StorageLocation{config: sluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{storagelocation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sluo.mutation.done = true
	return _node, nil
}
