// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"goinv/ent/storagelocation"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// StorageLocation is the model entity for the StorageLocation schema.
type StorageLocation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Size holds the value of the "size" field.
	Size storagelocation.Size `json:"size,omitempty"`
	// Color holds the value of the "color" field.
	Color storagelocation.Color `json:"color,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StorageLocationQuery when eager-loading is set.
	Edges        StorageLocationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// StorageLocationEdges holds the relations/edges for other nodes in the graph.
type StorageLocationEdges struct {
	// Items holds the value of the items edge.
	Items []*Item `json:"items,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedItems map[string][]*Item
}

// ItemsOrErr returns the Items value or an error if the edge
// was not loaded in eager-loading.
func (e StorageLocationEdges) ItemsOrErr() ([]*Item, error) {
	if e.loadedTypes[0] {
		return e.Items, nil
	}
	return nil, &NotLoadedError{edge: "items"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StorageLocation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case storagelocation.FieldID:
			values[i] = new(sql.NullInt64)
		case storagelocation.FieldName, storagelocation.FieldSize, storagelocation.FieldColor:
			values[i] = new(sql.NullString)
		case storagelocation.FieldCreatedAt, storagelocation.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StorageLocation fields.
func (sl *StorageLocation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case storagelocation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sl.ID = int(value.Int64)
		case storagelocation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sl.CreatedAt = value.Time
			}
		case storagelocation.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sl.UpdatedAt = value.Time
			}
		case storagelocation.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sl.Name = value.String
			}
		case storagelocation.FieldSize:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				sl.Size = storagelocation.Size(value.String)
			}
		case storagelocation.FieldColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[i])
			} else if value.Valid {
				sl.Color = storagelocation.Color(value.String)
			}
		default:
			sl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the StorageLocation.
// This includes values selected through modifiers, order, etc.
func (sl *StorageLocation) Value(name string) (ent.Value, error) {
	return sl.selectValues.Get(name)
}

// QueryItems queries the "items" edge of the StorageLocation entity.
func (sl *StorageLocation) QueryItems() *ItemQuery {
	return NewStorageLocationClient(sl.config).QueryItems(sl)
}

// Update returns a builder for updating this StorageLocation.
// Note that you need to call StorageLocation.Unwrap() before calling this method if this StorageLocation
// was returned from a transaction, and the transaction was committed or rolled back.
func (sl *StorageLocation) Update() *StorageLocationUpdateOne {
	return NewStorageLocationClient(sl.config).UpdateOne(sl)
}

// Unwrap unwraps the StorageLocation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sl *StorageLocation) Unwrap() *StorageLocation {
	_tx, ok := sl.config.driver.(*txDriver)
	if !ok {
		panic("ent: StorageLocation is not a transactional entity")
	}
	sl.config.driver = _tx.drv
	return sl
}

// String implements the fmt.Stringer.
func (sl *StorageLocation) String() string {
	var builder strings.Builder
	builder.WriteString("StorageLocation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sl.ID))
	builder.WriteString("created_at=")
	builder.WriteString(sl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(sl.Name)
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", sl.Size))
	builder.WriteString(", ")
	builder.WriteString("color=")
	builder.WriteString(fmt.Sprintf("%v", sl.Color))
	builder.WriteByte(')')
	return builder.String()
}

// NamedItems returns the Items named value or an error if the edge was not
// loaded in eager-loading with this name.
func (sl *StorageLocation) NamedItems(name string) ([]*Item, error) {
	if sl.Edges.namedItems == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := sl.Edges.namedItems[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (sl *StorageLocation) appendNamedItems(name string, edges ...*Item) {
	if sl.Edges.namedItems == nil {
		sl.Edges.namedItems = make(map[string][]*Item)
	}
	if len(edges) == 0 {
		sl.Edges.namedItems[name] = []*Item{}
	} else {
		sl.Edges.namedItems[name] = append(sl.Edges.namedItems[name], edges...)
	}
}

// StorageLocations is a parsable slice of StorageLocation.
type StorageLocations []*StorageLocation
